var bundle = (function (exports, preact, hooks) {
  'use strict';

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var parseJSON = function parseJSON(response) {
    if (response.status === 204 || response.status === 205) {
      return null;
    }

    return response.json();
  };

  var checkStatus = function checkStatus(response) {
    if (response.status >= 200 && response.status < 300) {
      return response;
    }

    return response.json().then(function (body) {
      if (response.status === 200) {
        return body;
      }

      throw body;
    });
  };

  function request(_x, _x2) {
    return _request.apply(this, arguments);
  }

  function _request() {
    _request = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url, options) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return fetch(url, options).then(checkStatus).then(parseJSON);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _request.apply(this, arguments);
  }

  var useDataFetch = function useDataFetch(url, options) {
    var _useState = hooks.useState({
      payload: false,
      error: false
    }),
        _useState2 = _slicedToArray(_useState, 2),
        _useState2$ = _useState2[0],
        payload = _useState2$.payload,
        error = _useState2$.error,
        setValue = _useState2[1];

    var _useState3 = hooks.useState(true),
        _useState4 = _slicedToArray(_useState3, 2),
        loading = _useState4[0],
        setLoading = _useState4[1];

    hooks.useEffect(function () {
      var loadData = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url) {
          var data;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _context.next = 3;
                  return request(url, options);

                case 3:
                  data = _context.sent;
                  console.log('loadData -> data', data);
                  setValue({
                    payload: data
                  });
                  setLoading(false);
                  _context.next = 13;
                  break;

                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](0);
                  setValue({
                    error: _context.t0
                  });
                  setLoading(false);

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[0, 9]]);
        }));

        return function loadData(_x) {
          return _ref.apply(this, arguments);
        };
      }();

      loadData(url, options);
    }, [url, options]);
    return {
      payload: payload,
      error: error,
      loading: loading
    };
  };
  var fetchData = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(url, options) {
      var data, error, loading, fetch;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              error = false, loading = true;
              fetch = hooks.useCallback(function () {
                var loadData = /*#__PURE__*/function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(url) {
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.prev = 0;
                            _context2.next = 3;
                            return request(url, options);

                          case 3:
                            return _context2.abrupt("return", data = _context2.sent);

                          case 6:
                            _context2.prev = 6;
                            _context2.t0 = _context2["catch"](0);
                            error = _context2.t0;

                          case 9:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, null, [[0, 6]]);
                  }));

                  return function loadData(_x4) {
                    return _ref3.apply(this, arguments);
                  };
                }();

                return loadData(url);
              }, [url]);
              _context3.next = 4;
              return fetch();

            case 4:
              return _context3.abrupt("return", {
                payload: data,
                error: error,
                loading: loading
              });

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function fetchData(_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();

  Object.keys(preact).forEach(function (k) {
    if (k !== 'default') Object.defineProperty(exports, k, {
      enumerable: true,
      get: function () {
        return preact[k];
      }
    });
  });
  exports.fetchData = fetchData;
  exports.useDataFetch = useDataFetch;

  return exports;

}({}, Preact, preact/hooks));
